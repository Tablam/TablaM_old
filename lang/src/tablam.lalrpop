use std::str::FromStr;
use core::ast::*;

grammar;

pub Expr: Exp = {
    <l:Expr> "+" <r:Factor> => Exp::BinOp(BinOp::Plus, l.into(), r.into()),
    <l:Expr> "-" <r:Factor> => Exp::BinOp(BinOp::Minus, l.into(), r.into()),
    Factor,
};

Factor: Exp = {
    <l:Factor> "*" <r:Term> => Exp::BinOp(BinOp::Times, l.into(), r.into()),
    <l:Factor> "/" <r:Term> => Exp::BinOp(BinOp::Divide, l.into(), r.into()),
    Term,
};

Term: Exp = {
    <s:ScalarLiteral> => Exp::Scalar(s),
    <c:ColumnLiteral> => Exp::Column(c),
    <n:Name> => Exp::Name(n),
    "(" <Expr> ")",
};

Name: String = {
    r"[a-zA-Z][_a-zA-Z0-9]*" => <>.into()
};

ColumnLiteral: ColumnExp = {
    "[" <name:Name> "," <ty:Name> ";" <es:(<Expr>)+> "]" =>
        ColumnExp { name: name, ty: ty, es: es }
};

pub ScalarLiteral: Scalar = {
    <n:NumLiteral> => n,
    // <b:BoolLiteral> => b,
    <s:StringLiteral> => s,
};

NumLiteral: Scalar = {
    <digits:r"[0-9]+"> "i64" =>
        Scalar::I64(i64::from_str(digits).unwrap()),
    <digits:r"[0-9]+"> "i32"? =>
        Scalar::I32(i32::from_str(digits).unwrap()),
};

// BoolLiteral: Scalar = {
//     <b:r"true|false"> =>
//         Scalar::BOOL(bool::from_str(b).unwrap()),
// };

StringLiteral: Scalar = {
    <s:r#""[^"]*""#> => {
        let literal = &s[1..s.len()-1];
        Scalar::UTF8(encode_str(literal))
    },
};
